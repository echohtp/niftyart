import { actions } from '@metaplex/js'
import { PublicKey } from '@solana/web3.js'
import { WalletMultiButton } from '@solana/wallet-adapter-react-ui'
import { useConnection, useWallet } from '@solana/wallet-adapter-react'
import { useState } from 'react'
import Head from 'next/head'
import { useForm } from 'react-hook-form'
import BN from 'bn.js'
import styles from '../styles/Home.module.css'
import Upload from '../components/Upload'
import ipfsSDK from '../src/modules/ipfs/client'
import { Navbar } from '../components/Navbar';
import Link from 'next/link'

function sleeper (ms: any) {
  return function (x: any) {
    return new Promise(resolve => setTimeout(() => resolve(x), ms))
  }
}

function stringifyPubkeysAndBNInArray (a: any[]): any[] {
  const newA = []
  for (const i of a) {
    if (i instanceof PublicKey) {
      newA.push(i.toBase58())
    } else if (i instanceof BN) {
      newA.push(i.toString())
    } else if (parseType(i) === 'array') {
      newA.push(stringifyPubkeysAndBNInArray(i))
    } else if (parseType(i) === 'dict') {
      newA.push(stringifyPubkeysAndBNsInObject(i))
    } else {
      newA.push(i)
    }
  }
  return newA
}

function parseType<T> (v: T): string {
  if (v === null || v === undefined) {
    return 'null'
  }
  if (typeof v === 'object') {
    if (v instanceof Array) {
      return 'array'
    }
    if (v instanceof Date) {
      return 'date'
    }
    return 'dict'
  }
  return typeof v
}

function stringifyPubkeysAndBNsInObject (o: any): any {
  const newO = { ...o }
  for (const [k, v] of Object.entries(newO)) {
    if (v instanceof PublicKey) {
      newO[k] = v.toBase58()
    } else if (v instanceof BN) {
      newO[k] = v.toString()
    } else if (parseType(v) === 'array') {
      newO[k] = stringifyPubkeysAndBNInArray(v as any)
    } else if (parseType(v) === 'dict') {
      newO[k] = stringifyPubkeysAndBNsInObject(v)
    } else {
      newO[k] = v
    }
  }
  return newO
}

export default function Tester () {
  const {
    publicKey,
    signTransaction,
    signAllTransactions,
    connected,
    wallet
  } = useWallet()
  const { connection } = useConnection()
  const [contentUrl, setContentUrl] = useState<string | null>(null)
  const [nftMetadataUrl, setNftMetadataUrl] = useState<string>('')
  const [mint, setMint] = useState<boolean>(false)
  const {
    register,
    handleSubmit,
    watch,
    formState: { errors }
  } = useForm()
  const watchAllFields = watch()

  const onSubmit = handleSubmit(async data => {
    setMint(true)
    if (
      !wallet ||
      !publicKey ||
      !signTransaction ||
      !signAllTransactions ||
      !contentUrl
    ) {
      setMint(false)
      return
    }

    const nftJson = {
      name: data.name,
      symbol: '',
      description: data.description,
      image: '',
      animation_url: contentUrl,
      external_url: 'https://',
      seller_fee_basis_points: 800,
      attributes: [
        {
          trait_type: 'niftyplex',
          value : 'true'
        }
      ],
      properties: {
        files: [
          {
            uri: contentUrl,
            type: 'text/html'
          }
        ],
        category: 'html',
        creators: [
          {
            address: publicKey.toBase58(),
            share: 100
          }
        ]
      }
    }

    const settings = new File([JSON.stringify(nftJson)], 'nft_metadata.json')
    ipfsSDK
      .uploadFile(settings)
      .then((res: any) => {
        actions
          .mintNFT({
            connection,
            wallet: { publicKey, signTransaction, signAllTransactions },
            uri: res.uri.split('?')[0 ],
            maxSupply: data.maxSupply
          })
          .then((res: any) => {
            const strResult = stringifyPubkeysAndBNsInObject(res)
            // DO SOMETHING HERE
            setMint(false)
          })
          .catch((e: any) => {
            console.error("mint failed: ", e.message)
            setMint(false)
          })
      })
      .catch((e) => {
        console.error("upload failed: ", e.message)
        setMint(false)
      })
  })

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <Navbar/>
      {!connected && <div>Connect wallet plz...</div>}
      {connected && (
        <main className={styles.main}>
          <div className='grid grid-cols-2 gap-4'>
            <div className=''>
              <p>Use our <Link href="sample.html" passHref><a>BOILERPLATE</a></Link></p>
              <div className='w-1/2 px-4 py-4 border border-black'>
                <Upload
                  beforeUpload={file => {
                    const isHTML = file.type === 'text/html'
                    if (!isHTML) {
                      console.error(`${file.name} is not a HTML file`)
                    }
                    return isHTML
                  }}
                  onRemove={() => {
                    setContentUrl(null)
                  }}
                  success={(resp, file) => {
                    setContentUrl(resp.url)
                  }}
                >
                  <div className='flex flex-col justify-center'>
                    <p className=''>HTML FILES ONLY!</p>
                  </div>
                </Upload>
              </div>
              <form onSubmit={onSubmit}>
                <div className='w-full max-w-xs form-control'>
                  <label className='label'>
                    <span className='label-text'>Name</span>
                  </label>
                  <input
                    type='text'
                    placeholder=''
                    className='w-full max-w-xs input input-bordered'
                    {...register('name')}
                  />
                </div>
                <div className='w-full max-w-xs form-control'>
                  <label className='label'>
                    <span className='label-text'>Description</span>
                  </label>
                  <input
                    type='text'
                    placeholder=''
                    className='w-full max-w-xs input input-bordered'
                    {...register('description')}
                  />
                </div>
              </form>
            </div>
            <div className='grow'>
              <div className='shadow-xl card w-500 bg-base-100'>
                <figure>
                  {contentUrl && (
                    <iframe src={contentUrl} height={500} width={500} />
                  )}
                  {!contentUrl && (
                    <img src='https://via.placeholder.com/500' alt='Shoes' />
                  )}
                </figure>
                <div className='card-body'>
                  <h2 className='card-title'>
                    {watchAllFields.name || 'Title Goes Here'}{' '}
                  </h2>
                  <p>{watchAllFields.description || 'Description Goes Here'}</p>
                  <div className='justify-end card-actions'>
                    <button
                      className={`btn btn-primary ${mint ? 'loading' : ''}`}
                      onClick={onSubmit}
                    >
                      Mint it!
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </main>
      )}
    </div>
  )
}
